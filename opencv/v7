import cv2
import numpy as np
import time
import matplotlib.pyplot as plt

def detect_color(image, lower_color, upper_color):
    hsv = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)
    mask = cv2.inRange(hsv, lower_color, upper_color)
    mask = cv2.erode(mask, None, iterations=2)
    mask = cv2.dilate(mask, None, iterations=2)
    cnts, _ = cv2.findContours(mask.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
    return cnts, mask

def get_contour_center(contour):
    M = cv2.moments(contour)
    if M["m00"] != 0:
        center_x = int(M["m10"] / M["m00"])
        center_y = int(M["m01"] / M["m00"])
        return (center_x, center_y)
    else:
        return None

# Cargar la imagen del gato y ajustar su tamaño
gato_img = cv2.imread('gato.png')
gato_img = cv2.resize(gato_img, (50, 50))  # Ajusta el tamaño según sea necesario

cap = cv2.VideoCapture(0)

blue_lower = np.array([100, 150, 50])
blue_upper = np.array([140, 255, 255])
red_lower = np.array([0, 120, 70])
red_upper = np.array([10, 255, 255])

fixed_red_position = None
previous_blue_position = None
previous_time = None

positions = []
velocities = []
times = []

with open("positions.txt", "w") as pos_file, open("velocities.txt", "w") as vel_file:
    while True:
        ret, frame = cap.read()
        if not ret:
            break

        blue_cnts, _ = detect_color(frame, blue_lower, blue_upper)
        red_cnts, _ = detect_color(frame, red_lower, red_upper)

        if len(red_cnts) > 0:
            largest_red_contour = max(red_cnts, key=cv2.contourArea)
            fixed_red_position = get_contour_center(largest_red_contour)
            if fixed_red_position:
                cv2.circle(frame, fixed_red_position, 5, (0, 0, 255), -1)

        blue_position = None
        if len(blue_cnts) > 0 and fixed_red_position:
            largest_blue_contour = max(blue_cnts, key=cv2.contourArea)
            blue_position = get_contour_center(largest_blue_contour)
            if blue_position:
                cv2.circle(frame, blue_position, 5, (255, 0, 0), -1)
                cv2.line(frame, fixed_red_position, blue_position, (255, 255, 255), 2)

                relative_position = (blue_position[0] - fixed_red_position[0], blue_position[1] - fixed_red_position[1])
                current_time = time.time()
                times.append(current_time)

                if previous_blue_position and previous_time:
                    time_diff = current_time - previous_time
                    velocity = ((relative_position[0] - previous_blue_position[0]) / time_diff, 
                                (relative_position[1] - previous_blue_position[1]) / time_diff)
                    velocities.append(velocity)
                    vel_file.write(f"{current_time}: {velocity}\n")
                else:
                    velocities.append((0, 0))

                previous_blue_position = relative_position
                previous_time = current_time
                positions.append(relative_position)
                pos_file.write(f"{current_time}: {relative_position}\n")

        if fixed_red_position:
            # Dibuja el plano cartesiano
            cv2.line(frame, (fixed_red_position[0], 0), (fixed_red_position[0], frame.shape[0]), (0, 255, 0), 2)
            cv2.line(frame, (0, fixed_red_position[1]), (frame.shape[1], fixed_red_position[1]), (0, 255, 0), 2)

        if blue_position:
            # Coloca la imagen del gato en la posición del objeto azul
            x, y = blue_position
            y_start, y_end = max(0, y - 25), min(frame.shape[0], y + 25)
            x_start, x_end = max(0, x - 25), min(frame.shape[1], x + 25)

            gato_part = gato_img[0:(y_end - y_start), 0:(x_end - x_start)]
            frame[y_start:y_end, x_start:x_end] = gato_part

        cv2.imshow('Frame', frame)
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

cap.release()
cv2.destroyAllWindows()

times = [t - times[0] for t in times]
positions_x = [pos[0] for pos in positions]
positions_y = [pos[1] for pos in positions]
velocities_x = [vel[0] for vel in velocities]
velocities_y = [vel[1] for vel in velocities]

plt.figure(figsize=(10, 5))
plt.subplot(1, 2, 1)
plt.plot(times, positions_x, label='X Position')
plt.plot(times, positions_y, label='Y Position')
plt.title('Position vs Time')
plt.xlabel('Time (s)')
plt.ylabel('Position')
plt.legend()

plt.subplot(1, 2, 2)
plt.plot(times, velocities_x, label='X Velocity')
plt.plot(times, velocities_y, label='Y Velocity')
plt.title('Velocity vs Time')
plt.xlabel('Time (s)')
plt.ylabel('Velocity')
plt.legend()

plt.tight_layout()
plt.show()