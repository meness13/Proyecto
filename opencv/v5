import cv2
import numpy as np
import time

def detect_color(image, lower_color, upper_color):
    hsv = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)
    mask = cv2.inRange(hsv, lower_color, upper_color)
    mask = cv2.erode(mask, None, iterations=2)
    mask = cv2.dilate(mask, None, iterations=2)
    cnts, _ = cv2.findContours(mask.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
    return cnts, mask

def get_contour_center(contour):
    M = cv2.moments(contour)
    if M["m00"] != 0:
        center_x = int(M["m10"] / M["m00"])
        center_y = int(M["m01"] / M["m00"])
        return (center_x, center_y)
    else:
        return None

cap = cv2.VideoCapture(0)

blue_lower = np.array([100, 150, 50])
blue_upper = np.array([140, 255, 255])
red_lower = np.array([0, 120, 70])
red_upper = np.array([10, 255, 255])

fixed_red_position = None
previous_blue_position = None
previous_time = None

# Open a file to record positions
with open("positions.txt", "w") as file:
    while True:
        ret, frame = cap.read()
        if not ret:
            break

        blue_cnts, _ = detect_color(frame, blue_lower, blue_upper)
        red_cnts, _ = detect_color(frame, red_lower, red_upper)

        if len(red_cnts) > 0:
            largest_red_contour = max(red_cnts, key=cv2.contourArea)
            fixed_red_position = get_contour_center(largest_red_contour)
            if fixed_red_position:
                cv2.circle(frame, fixed_red_position, 5, (0, 0, 255), -1)

        if len(blue_cnts) > 0 and fixed_red_position:
            largest_blue_contour = max(blue_cnts, key=cv2.contourArea)
            blue_position = get_contour_center(largest_blue_contour)
            if blue_position:
                cv2.circle(frame, blue_position, 5, (255, 0, 0), -1)
                cv2.line(frame, fixed_red_position, blue_position, (255, 255, 255), 2)

                relative_position = (blue_position[0] - fixed_red_position[0], blue_position[1] - fixed_red_position[1])
                current_time = time.time()

                # Calculate velocity if previous position and time are available
                if previous_blue_position and previous_time:
                    time_diff = current_time - previous_time
                    velocity = ((relative_position[0] - previous_blue_position[0]) / time_diff, 
                                (relative_position[1] - previous_blue_position[1]) / time_diff)
                    print("Velocity of Blue Object:", velocity)

                # Save position and time for next calculation
                previous_blue_position = relative_position
                previous_time = current_time

                # Write the relative position to the file
                file.write(f"{relative_position}\n")

        cv2.imshow('Frame', frame)
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

cap.release()
cv2.destroyAllWindows()
